schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.2", for: EXECUTION) {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

directive @join__field(
  graph: join__Graph!
  requires: join__FieldSet
  provides: join__FieldSet
  type: String
  external: Boolean
  override: String
  usedOverridden: Boolean
) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(
  graph: join__Graph!
  interface: String!
) repeatable on OBJECT | INTERFACE

directive @join__type(
  graph: join__Graph!
  key: join__FieldSet
  extension: Boolean! = false
  resolvable: Boolean! = true
) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @link(
  url: String
  as: String
  for: link__Purpose
  import: [link__Import]
) repeatable on SCHEMA

scalar join__FieldSet

enum join__Graph {
  ACCOUNTS
    @join__graph(
      name: "accounts"
      url: "http://accounts.default.svc.cluster.local:4000/graphql"
    )
  LOCATIONS
    @join__graph(
      name: "locations"
      url: "http://locations.default.svc.cluster.local:4000/graphql"
    )
  PRODUCTS
    @join__graph(
      name: "products"
      url: "http://products.default.svc.cluster.local:4000/graphql"
    )
  REVIEWS
    @join__graph(
      name: "reviews"
      url: "http://reviews.default.svc.cluster.local:4000/graphql"
    )
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Location @join__type(graph: LOCATIONS, key: "uid") {
  uid: ID!
  name: String!
  address: String!
  zipcode: String!
  city: String!
  country: String!
}

type Mutation
  @join__type(graph: LOCATIONS)
  @join__type(graph: PRODUCTS)
  @join__type(graph: REVIEWS) {
  addLocation(newLocation: NewLocationInput!): Location
    @join__field(graph: LOCATIONS)
  updateLocation(uid: ID!, updateLocation: UpdateLocationInput!): Location
    @join__field(graph: LOCATIONS)
  deleteLocation(uid: ID!): Location @join__field(graph: LOCATIONS)
  addProductLocation(upc: ID!, uid: ID!, quantity: Int!): Product
    @join__field(graph: LOCATIONS)
  addProduct(newProduct: NewProduct!): Product @join__field(graph: PRODUCTS)
  updateProduct(upc: ID!, updateProduct: UpdateProduct!): Product
    @join__field(graph: PRODUCTS)
  deleteProduct(upc: ID!): Product @join__field(graph: PRODUCTS)
  postReview(review: NewReview!): Review @join__field(graph: REVIEWS)
}

input NewLocationInput @join__type(graph: LOCATIONS) {
  uid: ID!
  name: String!
  address: String
  zipcode: String
  city: String
  country: String
}

input NewProduct @join__type(graph: PRODUCTS) {
  upc: ID!
  name: String!
  price: Int!
  weight: Int
  size: String
  colour: String
}

input NewReview @join__type(graph: REVIEWS) {
  body: String!
  productUpc: ID!
  authorId: ID!
}

type Product
  @join__type(graph: LOCATIONS, key: "upc", extension: true)
  @join__type(graph: PRODUCTS, key: "upc")
  @join__type(graph: REVIEWS, key: "upc", extension: true) {
  upc: ID!
  inStock: Boolean @join__field(graph: LOCATIONS)
  locations: [ProductLocation!] @join__field(graph: LOCATIONS)
  name: String @join__field(graph: PRODUCTS)
  price: Int @join__field(graph: PRODUCTS)
  weight: Int @join__field(graph: PRODUCTS)
  size: String @join__field(graph: PRODUCTS)
  colour: String @join__field(graph: PRODUCTS)
  reviews: [Review] @join__field(graph: REVIEWS)
}

type ProductLocation @join__type(graph: LOCATIONS) {
  uid: ID!
  quantity: Int!
}

type Query
  @join__type(graph: ACCOUNTS)
  @join__type(graph: LOCATIONS)
  @join__type(graph: PRODUCTS)
  @join__type(graph: REVIEWS) {
  me: User @join__field(graph: ACCOUNTS)
  listAccounts: [User] @join__field(graph: ACCOUNTS)
  user(id: ID!): User @join__field(graph: ACCOUNTS)
  location(uid: ID!): Location @join__field(graph: LOCATIONS)
  locations: [Location!] @join__field(graph: LOCATIONS)
  topProducts(first: Int = 5): [Product] @join__field(graph: PRODUCTS)
  listProducts: [Product] @join__field(graph: PRODUCTS)
  product(upc: ID!): Product @join__field(graph: PRODUCTS)
  productCount: Int @join__field(graph: PRODUCTS)
  listReviews(productUpc: ID!): [Review] @join__field(graph: REVIEWS)
  reviewCount: Int @join__field(graph: REVIEWS)
}

type Review @join__type(graph: REVIEWS, key: "id") {
  id: ID!
  body: String
  author: User @join__field(graph: REVIEWS, provides: "username")
  product: Product
}

type Subscription @join__type(graph: PRODUCTS) @join__type(graph: REVIEWS) {
  productAdded: Product @join__field(graph: PRODUCTS)
  productUpdated: Product @join__field(graph: PRODUCTS)
  productDeleted: Product @join__field(graph: PRODUCTS)
  reviewAdded(productUpc: ID!): Review @join__field(graph: REVIEWS)
}

input UpdateLocationInput @join__type(graph: LOCATIONS) {
  address: String
  zipcode: String
  city: String
  country: String
}

input UpdateProduct @join__type(graph: PRODUCTS) {
  name: String
  price: Int
  weight: Int
  size: String
  colour: String
}

type User
  @join__type(graph: ACCOUNTS, key: "id")
  @join__type(graph: REVIEWS, key: "id", extension: true) {
  id: ID!
  name: String @join__field(graph: ACCOUNTS)
  username: String
    @join__field(graph: ACCOUNTS)
    @join__field(graph: REVIEWS, external: true)
  imageUrl: String @join__field(graph: ACCOUNTS)
  jobTitle: String @join__field(graph: ACCOUNTS)
  reviews: [Review] @join__field(graph: REVIEWS)
}
